добра практика в restful Web api ако имаме празен резултат да връщаме 204 no content, 
ако връщаме 200 ок с празен стринг се счита за грешка, 

Ако имаме поле за търсене е добре да е с заявка get, защото е добре да визуализира се в url 
бара какво търсим и все пак не правим промяна както в някои случай с пост метод

indexing (индексиране) в db е полезно в случаите когато имаме повече търсене, отколкото добавяне

за дати да пробвам jquery ui

добра практика е да се генерират правилните линкове спрямо дадените раутове UrlPage()  
vs <a asp- page or etc...,>, отколкото да подаваме хардкоднат (<a href="product\details\1">), стринг на анкертага
string url = UrlPage($"{model.type}\details, New {id = model. id}) => <a href="@url">

razor engine escape-ва генерирани html код ако идва от action-a, добре е да се escape-ва всичко 
което идва от потребителя с с цел сигурност, но може да имаме случай когато генерирания html е създаден 
от нас например пак в action-а тогава Html.Raw е добре да се ползва

добра практика е когато създаваме custom филтри, той да прави само едно нещо, 
един контролер ако има много custom филтри е труден за дебъгване

добра практика е когато имаме запазени промени и имаме таблица сочеща към друга е добре да 
сетним пропъртито по id, а не по референция пример:  виж снимката

направи филтър когато търсено нещо е нулл и връща notfound rezult

виж снимка. service.add добавя функционалност, service.configure променя настройките например със identity паролата

Добра практика е да нямаме много роли, 3 4, също така е добре ако си администратор да задаваш на 
потребителите роли едно ниво под теб, ако дадеш на потребител роля, отговаряща на теб, той може да те изтрие

Claims нещо което съм, може да получим Claims от външен авторитет, например api на Facebook, Claims са ключ и стойност

интересен случай правим филтър за лог който репортва колко време се изпълнява даден action, прави се със 
StopWatch и се регистрира като scope  в конфигурацията, след това с  DI в конструктора на 
филтъра виж картинката разгледай serilog библиотеката

Добра практира е да се описват целите данни за маршрута:
<a asp-area="NameOfArea" asp-controller="NameOfController" asp-action="NameOfAction asp-route-id="Id">link</a>

# Cache
```
Ако няма свободно място на сървъра паметта е заета, първото нещо, което ще се махне е cache.
```
## IMemoryCache
## Distributed Cache
```
Кешираните данни с които работим се намиран на централизирано място. Това място е най често база данни(SQLChachin или Redis)


```
## Cache Tag Helper
```
Този tag-helper, добре се комбинира с view-component(ако имаме сложни данни)
```
## Distributed Cache Tag Helper
## HTTP Response cache
```
Сет-ват се cache header в response(не се кешира в сървърът). Помагат на browser-ите. Това е на ниво browser.
Ако заредим страницата с тази опция и даден back бутона и после се върнем на същата страница с cache browser-a,
зарежда кешираните данни от диска не прави request към сървър-а
```